Applica la tecnica bottom-up di programmazione dinamica per realizzare una versione più efficiente del metodo statico
q riportato qui di seguito:
 public static long q( int i, int j, int k ) { // i, j, k >= 0
 long x = ( i < 2 ) ? i : q( i-2, j, k );
 long y = ( j < 2 ) ? j : q( i, j-2, k );
 long z = ( k < 2 ) ? k : q( i, j, k-2 );
 long m = x + y + z;
 return ( m == 0 ) ? 1 : m;
 }

la mia sol che è sbagliata:
public class BottomUp {
    public static long myQ(int i, int j , int k){
        long[][][] mem= new long [i+1][j+1][k+1];

        for (int a= 0; a <= i; a++ ){
            for (int b= 0; b <= j; b++){
                for (int c= 0;c <= k; c++){
                    if (a < 2 || b < 2 || c < 2 ) {
                        mem[a][b][c] = a+b+c;

                    }else {
                        mem[a][b][c]= mem[a -2][b][c] + mem[a][b -2][c] + mem[a][b][c -2];
                    }

                }//
            }//
        }//
        return mem[i][j][k];
    }

}
esempi di input/output
input: 2,3,0 es: 3, mio: 1
input: 2,3,3 es: 22, mio: 18
input: 0,0,0 es: 1, mio: 0
input: 0,1,0 es: 1, mio: 1
input: 0,1,1 es: 2, mio: 2
input: 1,1,1 es: 3, mio: 3
input: 2,1,1 es: 4, mio: 4
input: 2,2,2 es:6, mio:12